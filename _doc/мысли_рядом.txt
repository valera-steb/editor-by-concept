что поменялось с наброском Draggable/element/MoveController?
.произошло:
    .я взял внешний код, который просто демо.
    .добавил в проэкт, увидил как работает.
    .после уложил его на должное место (должное с точки зрения подхода).
    + и вот что-то сошлось...
.кстати:
    .контроллер в таком его виде оказался очень близким к понятию стереотипа.
     поскольку отслеживает ввод и оповещает - тем самым вводя информацию в систему/"свой_код".





что-то не так происходит:
.я беру частные вещи и из них собираю неч-то общее.
.а стоит увидеть в начале общее, которое потом бить на частные кусочки.

.в отношении перетягиваемых - что есть самым общим, где универсум?
+ есть:
    .контроль перемещения мыши -> даёт набор событий с их координатами.
    .теперь упёрся в детали движения - т.е. как оно будет выглядеть.
    .ещё надо будет как-то контролировать области, подсвечивать...

.а если общим алгоритмом:
    .взял элемент.
    .определил:
        .настройки перетягивания - как оно будет выглядеть.
        .куда его тянуть можно - в какие контейнеры, свой собственный перемещаемый ли.
    .тяну
        .в процессе подсвечивая куда может упасть элемент.
        .тут надо:
            .определять над контейнером ли тяну.
            .если да - может ли контейнер принять элемент.
            .если да:
                .как отображать элемент над контейнером.
                .как отображать предпологаемое получение контейнером элемента:
                    .либо контейнер подсвечивать.
                    .либо в контейнере место/holder показывать где упадёт.
    .кинул:
        .с определением что должно произойти:
            .скопировать, переместить, вернуть обратно.

=> вот этот процесс выразить/описать в коде надо. И дальше его детализировать.


далее о процессе:
.в начале стоит прояснить, на каких факторах я основывался:
    .набор событий - mousedown, mouseup, mousemove.
    + hover - собираюсь добавить.
+ ещё видимые:
    .регистр контейнеров:
        .т.е процесс поддержания списка актуальных контейнеров.
        .нужен по существу только что-бы знать на кого hover вешать
         хотя дополнительный бонус - пометка допустимых контейнеров.
    .валидация контейнером элемента:
        по элементу и его текущему контейнеру данный контейнер должен
        выдать определить тип добавления: никак, перенос, вставка.



меня раздрожает:
.процесс, когда одновременно дорабатываеться несколько уровней/этапов ПФУ.
.т.е. нету законченной цепочки - от фактора до структуры.
.а этапы заполняються частями и ещё возникают ситуации, когда отказываюсь от разсмотрения некоторых факторов.
    .тем самым отказываясь и от структур далее от них построенных.
    .но я хотел-бы запоминать эти наброски, причины зачем они были и почему отказались.
    .как и где их оформлять?
    .как чистить рабочую систему от них?





что выноситься в фичу?
.описание сценария фичи, которое основанно на языке, из интерфейсов к этой фичи от используемых компонентов.
.основные моменты - целостность образующие вещи...
    .как по яснее выразить вот это понятие целостности?
        .точка сборки?
        .управляющая часть - субъект управления?
        .место в котором вся функциональность собираеться - сетевая модель?
        .план, сценарий - но я хочу подчеркнуть, что это нечто работающее. Однако оно остаёться описанием.

+ каким критериям это что (выносимое в фичу) соответствует?





контроллер адресуемый в ngRoute как фича, точка сборки суб контроллеров/фич.
.предпосылка:
    .на экране собираеться несколько контроллеров.
    .контроллеры могут взаимодействовать между собой по разному.
    .конкретика в контроллере экрана.
.ход разработки:
    .макетирование - собираеться всё в контроллере.
    .фиксация/осознание отвтственностей и их очерчивание.
    .разнос по отдельным контроллерам/директивам/сервисам.
    .переосмысление распределения обязаностей.










почему не цепляет продолжение разработки демо?
.:
  .м... я изобретаю велосипед?
  .приходиться прокладывать новые цепочки мыслей:
    + при этом я погряз в этом процессе
    .т.е. надо как-то прийти к какому-то концу.
    .к некой модели меня сейчас устраивающей?
    ! а к чему в итоге стремлюсь?

  .тот-же хороший вопрос - как в повседневность вписываться будет?
    .в мою текущую работу например.

.а на чём можно увидеть пользу моих изысканий?
  .по крайней мере прошлых, про контекст ответственности:
    .ведь довольно быстро нарисовался маппер - его первый макет...

  .однако применение других подходов где?
  + ведь сейчас я стараюсь разбираться в чём-то другом... более событийном что-ли?

+ и куда потом я думаю их направить?
  .скорее как использовать.

! но нужно уточнить результат - цель:
  .ПФУ, представление о: дереве познания, сетевой модели;
  выразительные возможности языка программирования - порождают:
    .поток целей и ветвлений, набор взаимосвязанных образов,
    .формы в которые выливаються разсуждения.
  при этом сейчас добавляеться вот эта идея о мысленном домино...
    .прокатать несколько цепочек, даже одну модель.
    .подготовить для неё выразительные средства на базе таких языков.
    .настроить автопилот и научиться выводить из него результаты.

    при этом
    .т.к. явление универсальное, то и в других областях что-то откроеться.
      .т.е. получение навыков работы с цепочками.
    .явное переключение от разработчика к пользователю/исполнителю
      должно дать ощущения и умение наблюдать за процессом.

    и далее
    .когда устаканиться умение.
    .встраивание в другие и открытие своих.

    почему свои не поламаються при этом?
    .ведь цепочки таки на нравах завязаны - и вот эту работу над нравами я тут упустил










противоречие взаимосвязей/разработки
.:
  .с одной стороны проэктирование с верху в низ более устойчиво.
  .с другой - выявление деталей/факторов в процессе приводит к переосмыслению верха.

.решение - прототипирование, которое даёт возможность на частичных реализациях
  оценить что есть целое.

.и всё-же ещё одно - деление на части...:
  .отражение оу в систему:
    при этом оу тут в 2-х смыслах:
    .и то что есть и чем надо управлять.
    .и то что система создаёт как порождённый ею объект - интерфейс к своим фичам.

  .набор прикладных концепций (features) - которые:
    .как-бы единолично модифицируют оу.
      существуют без оглядки на других
      имеют доступ ко всему отражению оу - в пределе, но в частности к тем местам где нужны
      тем самым модифицируют весь оу
      запускаються как-бы сами, не видят кто их запустил - лишь определяют в каких условиях их трогать

  .некая инфраструктура.

  .набор "преобразователей" в языки прикладных концепций.

+ при этом в зависимости от проэкта идёт детализация структуры:
  .т.е. для ui - появляються:
    parts - как части экрана.
    И сервисы:
     .как интерфейсы к другому объекту domain - например.
     .как детализация инфраструктуры к конкретики прикладной области:
        .приложение - часть инфраструктуры.
        .однако в приложении могут существовать сервисы вписанные в жизненный цикл приложения
         уточняющие его базовое поведение.

.и детали процесса:
  .как выделение частей.
  .выявление процессов - с отражением в сетевых моделях.
  .распределение обязанностей - за переходы в сетевых моделях
   - с догрузкой элементов и формированием целевых концепций.








почему понятие алгоритма не явялеться помошником в переходе от частей к распределённым обязанностям
и сформированным под них структурам?
.алгоритм - набор инструкций, описывающих порядок действий исполнителя(ей)
 для достижения некоторого результата.
  .:
    .какое явление отражает алгоритм?
    .алгоритмы - это свойства объектов либо фикции разума?
    .алгоритм - это абстракция - но что в основе абстракции?

    .действия и исполнители - снова где их корни?
    .существуют ли алгоритмы как нечто "само по себе" - нечто что можно отразить?

.к определению:
  .алгоритм - абстракция частной меры процесса отраженная в образах?
  .






и что-же это твориться!?
.ситуация:
    .в процессе написания кусочка конвертера.

.наброски описания:
  .как буд-то в голове есть некая модель машины.
  .я части этой модели выражаю в коде.
  .только интерисующие части...
  .и разбивку сразу делаю...

  .но она вся какая-то потоковая.
  .а ещё - это буквально автомат разбитый:
    .есть стереотипы, которые определяют ситуацию - точнее детали.
    .есть модуль который определяет интерисующую команду.
    .уже есть намётки на модуль который будет команды исполнять.

  ! но я чего-то фундаментального не до говариваю
    .легкость мыслей?
    .весь код кажеться под контролем, каждая часть на месте.
    .мысли о том что ещё надо - зафиксированы.
    .мысли о чём-то ещё - как бы занют своё место:
        .тут я остановился на моменте, когда у меня в глобальных стереотипах есть
         isLink, isLinkTo... isBrunchTo - но нет их реализаций.
         т.е. далее надо будет добавить структуру, которая будет хранить детали линка
         и над которой будут работать вот эти функции

  .одна из сторон лёгкости мысли:
    .я могу выражать сейчас именно действия которые меня интерисуют, сценарий.
    .при этом не заботясь о деталях данных - как оно будет храниться.

    .и это даёт некое ощущение быстрого прогресса - я не теряю мысли которые додумал.

  => т.е. 2 фокуса:
    .на указание структур данных: что есть, как связанно.
    .на указание потока... управляющей структуры.
    .на указание действий, которые надо выполнить.





































