какой вопрос?
.что меня не устраивает?
.что я хочу найти?
.что попробовать?
.что вырываеться - стремиться выразиться?

=>
.ограничить набор понятий, которые использую для разработки.
.вывести/соотнести эти понятия из/с ПФУ.



структура из архимедикса:
.база.
.апи: домен + сервис.
    .домен: repository + service + dto.
    .сервис: controllers + models.
.клиент: views + controllers + services + directives.

+ под каждую задачу/функциональность своя папка с нужным ей.
    .на одном уровне (апи либо клиента) могут быть пересечения - account use auth.



ещё вопросы:
.а на что я напираю -
    т.е. архитектурных понятий мне не хватает,
    либо понятий/понимания предметной области?

.и ещё - такое упорное желание в основу положить ДОТУ - почему, что в нём?
    .откуда такая мощная установка тут что-то зделать...
    .откуда слепая потребность соотнести?

.а не стремлюсь ли я к единому описанию... чему-то единообразному, форма которого неизменна для любых
прикладных областей, нечто достаточно гибкое - т.е. позволяющее вставлять любые хитрые оптимизации (хотя
не знаю зачем такое дописал... про оптимизации).


структура задумываемая:
.клиент:
    .parts - как части экрана, описывают их содержимое, и проброс вызовов...

    .features - как фишки работающие на экране... - функции отображения, например:
        .управление логикой перетаскивания. Для неё надо получить модель экрана текущего (всего,
        в том числе и из за пределов области с которой потянули), может что-то подсветить,
        где-то зарегистрироват части, где-то есть пометки. Ещё проверить куда при перетягивании упадёт
        этот элемент (если в низлежащих списках сортировка либо ещё что-то), сделать оповещение при успешном
        перемещении модели... т.е. куча логики, которой подчинены множество деталей, но она
        не есть обязанностью приведенных частей, и хочеться собрать в одном месте.

    .global[services] - таки думаю нужно неч-то существующее в роли доступных везде сервисов.
        .напримере того-же перетягивания - имеет смысл регистрировать набор областей (которые появляються
        с отображением частей) что-бы фича перемещения могла откуда-то узнать, с кем ей работать.
        .думаю основная фишка глобальных сервисов - что за их жизненный цикл отвечает приложение
        и он сопоставим с жизнью всего приложения, тогда как части - могут проживать свой век внутри
        других частей (пускай контроль их жизненного цикла и свешен на angular, в смысле создания/удаления).

+ domain - как модель прикладной области, собственно того что в ui отображаеться, и куда данные
 полученные из ui проэцируються.



 =>
 .т.е. главная идея проходящая через приведенную структуру - помимо разбивки на части
 (по признаку объектности - т.е. в прикладной области это набор списков, часть из которых может быть
 не видна, и каждый со своим содержимым - набором полей)
 ещё есть яркая разбивка на описание частей которые исполняют неч-то и описание логики поведения, которая
 говорит что этим частям исполнять - принимает решения.

 .ещё одна идей - проистекающая из определения суперсистемы в ДОТУ - объект у нас сложный,
  со взаимовложенными элементами. Разные фичи могут "видеть" его структуру по своему.


и ещё вопросы:
.интересно, насколько сложно тестировать логику принятия решений и самих исполнителей по отдельности?
 т.е. ведь здесь проявляеться нечто пригодное для тестирования... 2 разных в фундаменте подхода:
    .если для исполнителя важен просчёт формулы и вываливание набора статусов (при наличии ошибки).
        .на входе 1 на выходе 1: одна команда - один результат.
    .то для решателя - набор исходных условий, по которым он принимает одно единственное решение.
        .на входе множество параметров на выходе одна команда, возможно ещё зависящая от режима.

+ при этом как такой подход влияет на разработку?
    .ведь выделив чётко исполнителей, и что им надо уметь, управление может строиться по разным концепциям.





