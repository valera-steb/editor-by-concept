раскладка графа...

вводные:
.есть последовательность вершин с верху в низ.
.гарантировано что вершины ниже:
    .либо не имеют ссылок с верху.
    .либо обязательно ссылаються на кого-то вверху.

при этом:
.заполнение идёт с лева на право.
.2 вершины может связывать несколько переходов.

надо:
.определить для каждой вершины отступы с лева.






пример:
[
    {
        name: 1,
        outs: [2, 3]
    },
    {
        name: 2,
        outs: [3]
    },
    {name: 3}
]

первый проход:
.ввод: 1 - 2, 3
.линия: 2, 3
.массив:
    1
    ветка, ветка

.ввод: 2 - 3
.линия: 3
.массив:
    1
    ветка, ветка
    линия, линия
    2

.ввод: 3
.линия: ""
.массив:
    1
    ветка, ветка
    линия(2), линия(3)
    2, линия(3)
    линия(3), линия(3)
    3, свертка(3)



пример:
[
    {
        name: 1,
        outs: [2, 3, 4]
    },
    {
        name: 2,
        outs: [5]
    },
    {
        name: 3,
        outs: [5]
    },
    {
        name: 4,
        outs: [5]
    },
    {name: 5}
]

.in: 1 - 2, 3, 4
.l: 2, 3, 4
.m:
    1
    b(x), b(x), b(x) - x =[2, 3, 4]

.in: 2 - 5
.l: 3, 4, 5
.m:
    1
    b(x), b(x), b(x) - x =[2, 3, 4]
    L(2)
    2
    L(5)

.in: 3 - 5
.l: 4, 5, 5
.m:
    1
    b(x), b(x), b(x) - x =[2, 3, 4]
    L(2)
    2
    L(5)
    L(5), L(3)
    L(5), 3
    L(5), L(5)

.in: 4 - 5
.l: 5, 5, 5
.m:
    1
    b(x), b(x), b(x) - x =[2, 3, 4]
    L(2)
    2
    L(5)
    L(5), L(3)
    L(5), 3
    L(5), L(5)
    L(5), L(5), L(4)
    L(5), L(5), 4
    L(5), L(5), L(5)

.in: 5
.l: ''
.m:
    1
    b(x), b(x), b(x) - x =[2, 3, 4]
    L(2)
    2
    L(5)
    L(5), L(3)
    L(5), 3
    L(5), L(5)
    L(5), L(5), L(4)
    L(5), L(5), 4
    L(5), L(5), L(5)
    5, c(5), c(5)

+ обратный проход
    1
    b(2), b(3), b(4)
    L(2)
    2
    L(5)
    L(5), L(3)
    L(5), 3
    L(5), L(5)
    L(5), L(5), L(4)
    L(5), L(5), 4
    L(5), L(5), L(5)
    5, c(5), c(5)



пример:
[
    {
        name: 1,
        outs: [2, 3, 4]
    },
    {
        name: 2,
        outs: [5]
    },
    {
        name: 3,
        outs: [5]
    },
    {
        name: 4,
        outs: [5]
    },
    {name: 5}
]

.in: 1 - 2, 3, 4
.m:
    1
    b(x), b(x), b(x) - x =[2, 3, 4]

.in: 2 - 5
.l: 3, 4, 5
.m:
    1
    b(x), b(x), b(x) - x =[2, 3, 4]
    L(2), b(y), b(y) - y =[3, 4]
    2, ...
    L(5), ...

.in: 3 - 5
.m:
    1
    b(x), b(x), b(x) - x =[2, 3, 4]
    L(2), b(y), b(y) - y =[3, 4]
    2, ...
    L(5), b(y), b(y) - y =[3, 4]
    L(5), L(3), b(4)
    L(5), 3,    b(4)
    L(5), L(5), b(4)

.in: 4 - 5
.m:
    1
    b(x), b(x), b(x) - x =[2, 3, 4]
    L(2), b(y), b(y) - y =[3, 4]
    2, ...
    L(5), b(y), b(y) - y =[3, 4]
    L(5), L(3), b(4)
    L(5), 3,    b(4)
    L(5), L(5), b(4)
    L(5), L(5), L(4)
    L(5), L(5), 4
    L(5), L(5), L(5)

.in: 5
.m:
    1
    b(x), b(x), b(x) - x =[2, 3, 4]
    L(2), b(y), b(y) - y =[3, 4]
    2, ...
    L(5), b(y), b(y) - y =[3, 4]
    L(5), L(3), b(4)
    L(5), 3,    b(4)
    L(5), L(5), b(4)
    L(5), L(5), L(4)
    L(5), L(5), 4
    L(5), L(5), L(5)
    5,    c(5), c(5)

+ обратный проход
    1
    b(2), b(3), b(4)
    L(2), L(3), L(4)
    2,    L(3), L(4)
    L(5), L(3), L(4)
    L(5), L(3), L(4)
    L(5), 3,    L(4)
    L(5), L(5), L(4)
    L(5), L(5), L(4)
    L(5), L(5), 4
    L(5), L(5), L(5)
    5,    c(5), c(5)


требования к автомату:
.если с верху пусто:
    .цепляем номер - добавляем в нутрь.

    .цеплям выходы:
        .если один: L(x)
        .если несколько: b(x), b(x) [, b(x)] с пометкой x in [a..z]

.если с верху нет такого номера
    .аналог выше - только ещё копии один к одному перед ними.

.если с верху есть бранч на такой:
    .превратить в линки.
    .ещё раз пройти алгоритм с этим же.

.если с верху есть линк на такой:
    .один:
        .цепляем под низ и цепляем выходы:
            .если один - подниз.
            .если несколько - надо подумать.

    .несколько:
        .делаем срез:
            .при этом...





+ вставка динамических ветвей
частичное заполнение
 - когда было 3 выхода, осталось 2
разрешение ветви
 - когда было 2 выхода - один есть, другой определяеться








